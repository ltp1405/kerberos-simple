CL as Client
TGS as "Ticket-Granting Service"
DB as "Database"

CL.prepareReq() {
    ap_req = generate_AP_REQ()
    padata = append(padata, ap_req)
    return KRB_TGS_REQ
}

CL->TGS.KRB_TGS_REQ {
    if ("request is identical to a recent successful request") {
        return KRB_TGS_REP
    }
    if ("authenticator is replay" && "request is not identical") {
        return KRB_AP_ERR_REPEAT
    }
    req_sname = get_sname(KRB_TGS_REQ)
    padata = get_padata(KRB_TGS_REQ)
    // AP-REQ
    auth_header = padata_where(type == pa-tgs-req)
    tk_sname = get_sname(auth_header)
    if (enc_tgt == null) {
        return KDC_ERR_PADATA_TYPE_NOSUPP
    }
    if ("RENEW, VALIDATE, or PROXY are present" && req_sname == tk_sname) {
        skey = DB.get_skey(req_sname)
        tgt = get_ticket(auth_header)
        ticket = decrypt(tgt, skey)
    }
    authenticator = get_authenticator(auth_header)
    auth_checksum = get_checksum(authenticator)
    checksum = calculate_checksum(KRB_TGS_REQ)
    if (auth_checksum != checksum) {
        return KRB_AP_ERR_MODIFIED
    }
    if ("checksum_type not collision-proof") {
        return KRB_AP_ERR_INAPP_CKSUM
    }
    if ("checksum_type not supported") {
        return KDC_ERR_SUMTYPE_NOSUPP
    }
    enc_authorization_data = get_authorization_data(KRB_TGS_REQ)
    subkey = get_subkey(authenticator)
    try {
        decrypt(enc_authorization_data, subkey)
    }
    catch {
        return KRB_AP_ERR_BAD_INTEGRITY
    }
}